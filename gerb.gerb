; gerb comments
;   ; comment

; gerb token/terminal synstax
;   'terminal' = "exact-match"
;   'terminal' = [allowed chars]
;   'terminal' = "more"* | [complicated]+ "expression"?
;   'match-any' = .
;   'terminal' = "\n" | "\\n"
;   ALL_CAPS   = [captures what it matches]
;   ''        = "ignore"

'('  = "("
')'  = ")"
'='  = "="
'|'  = "|"
'*'  = "*"
'+'  = "+"
'?'  = "?"
'!'  = "!"
'.'  = "."
'eof'= "\0"
'\n' = "\n"
''  = [ \t]+ | ";" .* "\n"
EXACT        = "\"" !"\""* "\""
UNION        = "[" !"]"* "]"
NON_TERMINAL = [abcdefghijklmnopqrstuvwxyz-]+
TERMINAL     = "'" !"'"* "'" | [ABCDEFGHIJKLMNOPQRSTUVWXYZ_]+

; gerb rules syntax
;   non-terminal = non-terminal
;   non-terminal = 'terminal'
;   non-terminal = 'or-option-1' | 'or-option-2' | or-option-3
;   non-terminal = 'terminal'*
; gerb precedence
;   ()
;   * ? +
;   |

gerb = ( token? '\n' )* ( rule? '\n' )* 'eof'

; terminal rules
token         = TERMINAL '=' token-expr
token-expr    = token-or+
token-or      = token-postfix ( '|' token-postfix )*
token-postfix = token-prefix ( '*' | '+' | '?' )?
token-prefix  = '!'? token-primary
token-primary = '(' token-expr ')' | EXACT | UNION | '.'

; non-terminal rules
rule         =   NON_TERMINAL '=' rule-expr
rule-expr    =   rule-or+
rule-or      =   rule-postfix ( '|' rule-postfix )*
rule-postfix =   rule-primary ( '*' | '+' | '?' )?
rule-primary =   NON_TERMINAL | TERMINAL | '(' rule-expr ')'