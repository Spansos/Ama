enum-definition = 'enum' IDENTIFIER '{' (type? IDENTIFIER ';')* '}'
struct-definition = 'struct' IDENTIFIER '{' (variable-declaration ';')* '}'
func-definition = type IDENTIFIER '(' arguments ')' 'var'? statement
do-while    = 'do' statement 'while' '(' expression ')'
while       = 'while' '(' expression ')' statement
for         = 'for' '(' statement expression ';' statement ')' statement
type        = 'var'? ( ( '&'|'*' type ) | IDENTIFIER )
variable-declaration = type IDENTIFIER ('=' expression)?
statement   = ( (variable-declaration | expression)? ';' ) | for | while | do-while | func-definition | struct-definition | enum-definition | code-block
code-block  = { statement* }


; precedence rules
;   unary postfix   [] ()
;   unary prefix    * & - + ! ~
;   binary mult     * / // %
;   binary add      + -
;   binary shift    << >>
;   binary binary   | & ^
;   comparison      == !== > < >== <==
;   logical         || && ^^
;   assignment      = -= += *= /= //= %= != >>= <<= |= &= ^= ~= != >= = >=== <===< a?b:c a?=b:c
expression      = assignment
assignment      = logical ( ( '=' | '-=' | '+=' | '/=' | '//=' | '%=' | '!=' | '>>=' | '<<=' | '|=' | '&=' | '^=' | '~=' | '!=' | '>=' | '<=' | '>===' | '<===' ) logical )* | logical ( '?' | '?=' ) logical ':' logical
logical         = comparison ( ( '||' | '&&' | '^^' ) comparison )*
comparison      = binary-binary ( ( '==' | '!==' | '>' | '<' | '>==' | '<==' ) binary-binary )*
binary-binary   = binary-shift ( ( '|' | '&' | '^' ) binary-shift )*
binary-shift    = binary-add ( ( '<<' | '>>' ) binary-add )*
binary-add      = binary-mult ( ( '+' | '-' ) binary-mult )*
binary-mult     = unary-prefix ( ( '*' | '/' | '//' | '%' ) unary-prefix )*
unary-prefix    = ( '*' | '&' | '-' | '+' | '!' | '~' ) unary-prefix | unary-postfix
unary-postfix   = primary '(' arguments ')' | primary '[' expression ']' | primary
primary         = INT | FLOAT | STRING | IDENTIFIER | '(' expression ')'

arguments = expression (',' expression)*