#include "token.hpp"

std::string serialize(TokenType token_type) {
    switch (token_type) {
        case TokenType::IDENTIFIER:
            return "IDENTIFIER";
        case TokenType::COLON:
            return "COLON";
        case TokenType::DOT:
            return "DOT";
        case TokenType::COMMA:
            return "COMMA";
        case TokenType::SEMICOLON:
            return "SEMICOLON";
        case TokenType::INT:
            return "INT";
        case TokenType::FLOAT:
            return "FLOAT";
        case TokenType::STRING:
            return "STRING";
        case TokenType::ASSIGNMENT:
            return "ASSIGNMENT";
        case TokenType::EQUAL:
            return "EQUAL";
        case TokenType::NOT_EQUAL:
            return "NOT_EQUAL";
        case TokenType::EQUAL_ASSIGNMENT:
            return "EQUAL_ASSIGNMENT";
        case TokenType::GREATER:
            return "GREATER";
        case TokenType::LESSER:
            return "LESSER";
        case TokenType::GREATER_ASSIGNMENT:
            return "GREATER_ASSIGNMENT";
        case TokenType::LESSER_ASSIGNMENT:
            return "LESSER_ASSIGNMENT";
        case TokenType::GREATER_EQUAL:
            return "GREATER_EQUAL";
        case TokenType::LESSER_EQUAL:
            return "LESSER_EQUAL";
        case TokenType::GREATER_EQUAL_ASSIGNMENT:
            return "GREATER_EQUAL_ASSIGNMENT";
        case TokenType::LESSER_EQUAL_ASSIGNMENT:
            return "LESSER_EQUAL_ASSIGNMENT";
        case TokenType::OR:
            return "OR";
        case TokenType::AND:
            return "AND";
        case TokenType::XOR:
            return "XOR";
        case TokenType::MINUS:
            return "MINUS";
        case TokenType::PLUS:
            return "PLUS";
        case TokenType::TIMES:
            return "TIMES";
        case TokenType::DIVIDE:
            return "DIVIDE";
        case TokenType::INTIGER_DIVIDE:
            return "INTIGER_DIVIDE";
        case TokenType::MODULUS:
            return "MODULUS";
        case TokenType::MODULUS_ASSIGNMENT:
            return "MODULUS_ASSIGNMENT";
        case TokenType::NOT:
            return "NOT";
        case TokenType::QUESTION_MARK:
            return "QUESTION_MARK";
        case TokenType::RIGHT_SHIFT:
            return "RIGHT_SHIFT";
        case TokenType::LEFT_SHIFT:
            return "LEFT_SHIFT";
        case TokenType::BIT_OR:
            return "BIT_OR";
        case TokenType::BIT_AND:
            return "BIT_AND";
        case TokenType::BIT_XOR:
            return "BIT_XOR";
        case TokenType::BIT_NOT:
            return "BIT_NOT";
        case TokenType::BIT_OR_ASSIGNMENT:
            return "BIT_OR_ASSIGNMENT";
        case TokenType::BIT_AND_ASSIGNMENT:
            return "BIT_AND_ASSIGNMENT";
        case TokenType::BIT_XOR_ASSIGNMENT:
            return "BIT_XOR_ASSIGNMENT";
        case TokenType::BIT_NOT_ASSIGNMENT:
            return "BIT_NOT_ASSIGNMENT";
        case TokenType::REFERENCE:
            return "REFERENCE";
        case TokenType::DEREFERENCE:
            return "DEREFERENCE";
        case TokenType::REFERENCE_ASSIGNMENT:
            return "REFERENCE_ASSIGNMENT";
        case TokenType::DEREFERENCE_ASSIGNMENT:
            return "DEREFERENCE_ASSIGNMENT";
        case TokenType::OR_ASSIGNMENT:
            return "OR_ASSIGNMENT";
        case TokenType::AND_ASSIGNMENT:
            return "AND_ASSIGNMENT";
        case TokenType::XOR_ASSIGNMENT:
            return "XOR_ASSIGNMENT";
        case TokenType::MINUS_ASSIGNMENT:
            return "MINUS_ASSIGNMENT";
        case TokenType::PLUS_ASSIGNMENT:
            return "PLUS_ASSIGNMENT";
        case TokenType::TIMES_ASSIGNMENT:
            return "TIMES_ASSIGNMENT";
        case TokenType::DIVIDE_ASSIGNMENT:
            return "DIVIDE_ASSIGNMENT";
        case TokenType::INTIGER_DIVIDE_ASSIGNMENT:
            return "INTIGER_DIVIDE_ASSIGNMENT";
        case TokenType::NOT_ASSIGNMENT:
            return "NOT_ASSIGNMENT";
        case TokenType::QUESTION_MARK_ASSIGNMENT:
            return "QUESTION_MARK_ASSIGNMENT";
        case TokenType::RIGHT_SHIFT_ASSIGNMENT:
            return "RIGHT_SHIFT_ASSIGNMENT";
        case TokenType::LEFT_SHIFT_ASSIGNMENT:
            return "LEFT_SHIFT_ASSIGNMENT";
        case TokenType::BRACKET_OPEN:
            return "BRACKET_OPEN";
        case TokenType::BRACKET_CLOSE:
            return "BRACKET_CLOSE";
        case TokenType::SQUARE_BRACKET_OPEN:
            return "SQUARE_BRACKET_OPEN";
        case TokenType::SQUARE_BRACKET_CLOSE:
            return "SQUARE_BRACKET_CLOSE";
        case TokenType::CURLY_BRACKET_OPEN:
            return "CURLY_BRACKET_OPEN";
        case TokenType::CURLY_BRACKET_CLOSE:
            return "CURLY_BRACKET_CLOSE";
        case TokenType::WHITESPACE:
            return "WHITESPACE";
        case TokenType::COMMENT:
            return "COMMENT";
        case TokenType::END_OF_FILE:
            return "END_OF_FILE";
    }
    return "ERROR";
}

Token::Token() :
    start(-1),
    type((TokenType)-1)
{ }


Token::Token (
    TokenType type,
    size_t start
) :
    start(start),
    type(type)
{ }